# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Release builds

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get Version
        id: get_version
        run: echo ::set-output name=VERSION::$(grep -Po 'version="\K((\d|\.)+)' setup.py)
      - name: Install dependencies
        run: |
          sudo apt install -y python3.8-minimal python3-pip python3-setuptools patchelf desktop-file-utils libgdk-pixbuf2.0-dev fakeroot strace
          sudo wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O /usr/local/bin/appimagetool
          sudo chmod +x /usr/local/bin/appimagetool
      - name: Install appimage-builder
        run: |
          sudo python3.8 -m pip install .
      - name: Build AppImage
        run: |
          cd recipes/appimage-builder
          export APPIMAGE_BUILDER_VERSION=${{ steps.get_version.outputs.VERSION }}
          appimage-builder --skip-test
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2.1.4
        with:
          name: appimage-builder
          path: 'recipes/appimage-builder/appimage-builder*.AppImage*'
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Download AppImage from build job
        uses: actions/download-artifact@v4.1.7
        with:
          name: appimage-builder
      - name: Install dependencies
        run: |
          sudo apt install -y adwaita-icon-theme
      - name: Pack bash
        run: |
          # build bash
          BUILDER_PATH=$(find $PWD -name appimage-builder-*.AppImage)
          chmod +x $BUILDER_PATH
          cd recipes/bash/
          $BUILDER_PATH --skip-test
          cat AppDir/org.gnu.bash.desktop
      - name: Test bash
        run: |
          recipes/bash/*.AppImage --appimage-extract-and-run -c "echo Hello World"
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2.1.4
        with:
          name: bash
          path: 'recipes/bash/*.AppImage*'
  publish-appimage:
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - uses: actions/checkout@v2
      - name: Download AppImage from build job
        uses: actions/download-artifact@v4.1.7
        with:
          name: appimage-builder
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: 'appimage-builder*.AppImage*'
  publish-python-wheel:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*
